# .github/workflows/main.yml

name: RAG automated - Dev - Build/Deploy

on:
  push:
    branches:
      - rag_automated # Trigger only on this branch
    paths:
      - "chatbot/rag/rag_automated/**" # Only trigger when files in this folder change
      - ".github/workflows/main.yml"

permissions:
  id-token: write # Required for OIDC
  contents: read # Required to checkout code

concurrency:
  group: deploy-rag-automated
  cancel-in-progress: true # Prevent overlapping deploys

env:
  AWS_REGION: us-east-2
  STACK_NAME: dev-rag-automated
  ENVIRONMENT: dev
  SAM_TEMPLATE: chatbot/rag/rag_automated/template.yaml
  DOCKERFILE: chatbot/rag/rag_automated/rag_embedding_function/dockerfile-pgvector_dual
  RAG_AUTOMATED_DOCKER_REGISTRY: ${{vars.DEV_RAG_AUTOMATED_DOCKER_REGISTRY}}
  RAG_AUTOMATED_DOCKER_IMAGE_NAME: ${{vars.DEV_RAG_AUTOMATED_DOCKER_IMAGE_NAME}}

  DB_HOST: ${{secrets.DEV_DB_HOST}}
  DB_PORT: ${{secrets.DEV_DB_PORT}}
  DB_NAME: ${{secrets.DEV_DB_NAME}}
  DB_USER: ${{secrets.DEV_DB_USER}}
  DB_PASSWORD: ${{secrets.DEV_DB_PASSWORD}}
  OPENAI_API_KEY: ${{secrets.OPENAI_API_KEY}}

jobs:
  rag-automated-build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up SAM CLI
        uses: aws-actions/setup-sam@v2

      # âœ… Prefer GitHub OIDC over static keys (requires AWS role setup)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github_role
          aws-region: ${{ env.AWS_REGION }}

      # - name: Login to Amazon ECR
      #   run: |
      #     aws ecr get-login-password --region $AWS_REGION \
      #       | docker login --username AWS --password-stdin ${{ vars.RAG_AUTOMATED_DOCKER_REGISTRY }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker image
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          COMMIT_SHA_SHORT=$(git rev-parse --short HEAD)
          IMAGE_TAG="${TIMESTAMP}-${COMMIT_SHA_SHORT}"

          docker buildx build \
            -t ${{ env.RAG_AUTOMATED_DOCKER_REGISTRY }}/${{ env.RAG_AUTOMATED_DOCKER_IMAGE_NAME }}:latest \
            -t ${{ env.RAG_AUTOMATED_DOCKER_REGISTRY }}/${{ env.RAG_AUTOMATED_DOCKER_IMAGE_NAME }}:$IMAGE_TAG \
            --platform linux/amd64 \
            -f $DOCKERFILE \
            --provenance=false \
            --push .

          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Cache SAM build artifacts
        uses: actions/cache@v4
        with:
          path: .aws-sam
          key: ${{ runner.os }}-sam-${{ hashFiles(env.SAM_TEMPLATE) }}
          restore-keys: |
            ${{ runner.os }}-sam-

      - name: Build SAM application
        run: sam build --template $SAM_TEMPLATE

      - name: Deploy SAM application
        run: |
          sam deploy \
            --resolve-s3 \
            --no-confirm-changeset --no-fail-on-empty-changeset \
            --resolve-image-repos \
            --stack-name $STACK_NAME \
            --capabilities CAPABILITY_IAM \
            --region $AWS_REGION \
            --parameter-overrides "
              OpenAIApiKey=${{ env.OPENAI_API_KEY }}
              DbHost=${{ env.DB_HOST }}
              DbPort=${{env.DB_PORT}}
              DbName=${{ env.DB_NAME }}
              DbUser=${{ env.DB_USER }}
              DbPassword=${{ env.DB_PASSWORD }}
              RagRegistry=${{env.RAG_AUTOMATED_DOCKER_REGISTRY}}
              RagImageName=${{env.RAG_AUTOMATED_DOCKER_IMAGE_NAME}}
              RagImageTag=${{ env.IMAGE_TAG }}
              VpcId=vpc-07f9344620b126698
              PrivateRouteTableIds=rtb-0a16d5c8cacfe81da
              PrivateSubnetIds=subnet-086b6b040206694e5,subnet-0c27c966a42433ffa,subnet-034c912787c048003  
              LambdaSecurityGroupId=sg-05b1521809248aa2f
            "

      - name: Upload SAM deployment logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: sam-deploy-logs
          path: .aws-sam/build
